/* 
 *	Copyright Washington University in St Louis 2006
 *	All rights reserved
 * 	
 * 	@author Mohana Ramaratnam (Email: mramarat@wustl.edu)

*/

package org.nrg.pipeline.client.freesurfer;

import gnu.getopt.Getopt;
import gnu.getopt.LongOpt;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Enumeration;
import java.util.Properties;

import org.nrg.pipeline.client.AbsVersion;
import org.nrg.pipeline.client.utils.FileUtils;
import org.nrg.pipeline.xmlbeans.xnat.AbstractResource;
import org.nrg.pipeline.xmlbeans.xnat.ImageResource;
import org.nrg.pipeline.xmlbeans.xnat.MRSessionDocument;
import org.nrg.pipeline.xmlbeans.xnat.MrSessionData;
import org.nrg.pipeline.xmlbeans.xnat.ExperimentData.Resources;
import org.nrg.xnattools.xml.MRXMLSearch;
import org.nrg.xnattools.xml.XMLStore;

public class FreesurferFileLabeler extends AbsVersion{
	
	//Get the session document
	//Add the resources to it - relative paths from session folder 
	//Store the document
	
	String host;
	String sessionId;
	String xnatId;
	String username;
	String password;
	String freesurferfolder;
	String config_file;
	Properties labelRelativePaths = null;
	
	public FreesurferFileLabeler(String[] argv) {
		if (argv.length == 0) {
            echoVersion();  
            printUsage();
            System.exit(1);
		}
		  int c;
		  int argsFound = 0;
		 LongOpt[] longopts = new LongOpt[8];
	     longopts[0] = new LongOpt("help", LongOpt.NO_ARGUMENT, null, 'h');
	     longopts[1] = new LongOpt("host", LongOpt.REQUIRED_ARGUMENT, null, 'o');
	     longopts[2] = new LongOpt("u", LongOpt.REQUIRED_ARGUMENT, null, 'u');
	     longopts[3] = new LongOpt("pwd", LongOpt.REQUIRED_ARGUMENT, null, 'p');
	     longopts[4] = new LongOpt("sessionId", LongOpt.REQUIRED_ARGUMENT, null, 's');
	     longopts[5] = new LongOpt("xnatId", LongOpt.REQUIRED_ARGUMENT, null, 'x');
	     longopts[6] = new LongOpt("folder", LongOpt.REQUIRED_ARGUMENT, null, 'f');
	     longopts[7] = new LongOpt("config", LongOpt.REQUIRED_ARGUMENT, null, 'c');
	     Getopt g = new Getopt("FreesurferFileLabeler", argv, "o:u:p:s:x:f:c:h;", longopts, true);
	        g.setOpterr(false); // We'll do our own error handling
	        //
	        while ((c = g.getopt()) != -1) {
	          switch (c)
	            {
	               case 'p':  password = g.getOptarg(); argsFound++; break;
	               case 'u':  username = g.getOptarg(); argsFound++;  break; 
	               case 's':  sessionId = g.getOptarg(); argsFound++ ;  break;
	               case 'x':  xnatId = g.getOptarg(); argsFound++ ;  break;
	               case 'f':  freesurferfolder = g.getOptarg(); argsFound++; break;
	               case 'o':  host = g.getOptarg(); argsFound++; break;
	               case 'c':  config_file = g.getOptarg();  break;
	               default:
	                   echoVersion();  
	                   printUsage();
	                   break;
	            }
	        }
			if (argsFound != 6 ) {
	            echoVersion();  
	            printUsage();
	            System.exit(1);
			}
			if (!freesurferfolder.endsWith(File.separator)) {
				freesurferfolder += File.separator;
			}

	}
	
	private void printUsage() {
		System.out.println("PURPOSE: This program will associate the files generated by Freesurfer as resources of an MRSession ");
		System.out.println("USAGE: FreesurferFileLabeler -host <XNAT Host> -u <XNAT Username> -pwd <XNAT Pwd> -sessionId <MRSession Label> -xnatId <XNAT MRSession ID> -folder <Freesurfer processed folder> [-config <Properties file describing labels and file paths>]");
		System.exit(1);
	}
	
	private void initLabels() throws IOException{
		if (config_file == null) 
			defaultLabels();
		else 
			loadLabels();
	}

	
	private void loadLabels() throws IOException {
		labelRelativePaths.load(new FileInputStream(config_file));
	}
	
	private void defaultLabels() {
		labelRelativePaths  = new Properties();
		//labelRelativePaths.put("FREESURFER_BRAINMASK", "mri/brainmask.mgz");
		labelRelativePaths.put("FREESURFER_T1", "mri/T1.mgz");
		//labelRelativePaths.put("FREESURFER_ASEG", "mri/aseg.mgz");
		labelRelativePaths.put("FREESURFER_WM", "mri/wm.mgz");
		labelRelativePaths.put("FREESURFER_ORIG", "mri/orig.mgz");
	}

	 private MRSessionDocument getMrSessionFromHost() throws Exception {
	        MRSessionDocument mrSession  = new MRXMLSearch(host, username, password).getMrSessionFromHost(xnatId, false);
	        return mrSession;
	 }

	
	public void process() throws Exception {
		initLabels();
		MRSessionDocument mrSession = getMrSessionFromHost();
		MrSessionData mrSessionData = mrSession.getMRSession();
		Resources resources = mrSessionData.getResources();
		if (!mrSessionData.isSetResources()) {
			resources = mrSessionData.addNewResources();
		}
		boolean store = false;
		String relativePath = FileUtils.getRelativePath(mrSession);
		Enumeration labels = labelRelativePaths.keys();
		while (labels.hasMoreElements()) {
			boolean lower = false;
			String label = (String) labels.nextElement();
			String path = (String) labelRelativePaths.get(label);
			File f = new File(freesurferfolder + path);
			if (!f.exists()) {
				f = new File(freesurferfolder + path.toLowerCase());
				lower = true;
			}
			if (f.exists()) {
				if (!resourceExists(label, resources)) {
					AbstractResource res = resources.addNewResource();
					ImageResource img = (ImageResource)res.changeType(ImageResource.type);
					img.setLabel(label);
					img.setFormat("MGZ");
					if (lower)
						img.setURI(freesurferfolder + path.toLowerCase());
					else 
						img.setURI(freesurferfolder + path);
					img.setURI(FileUtils.getPath(f.getAbsolutePath(),relativePath,sessionId));
					store = true;
				}
			}
		}
       	if (store) new XMLStore(mrSession,host, username, password).store();
	}
	
	private boolean resourceExists(String label, Resources resources) {
		boolean rtn = false;
		AbstractResource[] absResource = resources.getResourceArray();
		for (int i = 0; i < absResource.length; i++) {
			if (absResource[i].getLabel().equals(label)) {
				rtn = true;
				break;
			}
		}
		return rtn;
	}
 
	public static void main(String args[]) {
		FreesurferFileLabeler fileLabeler = new FreesurferFileLabeler(args);
		try {
			fileLabeler.process();
			System.exit(0);
		}catch(Exception e) {
			System.out.println(e.getClass() + " " + e.getCause() + " " + e.getLocalizedMessage());
			System.exit(1);
		}
	}

}


