plugins {
    id "jacoco"
    id "java"
    id "maven"
    id "maven-publish"
    id "idea"
    id "eclipse"
    id "io.spring.dependency-management" version "1.0.9.RELEASE"
}

group "org.nrg.xnat.pipeline"
version "1.8.0-SNAPSHOT"

description = "XNAT Pipeline Client"

sourceCompatibility = 1.7
targetCompatibility = 1.7

def javaVersion = JavaVersion.current()
if (javaVersion.java8Compatible || javaVersion.java9Compatible || javaVersion.java10Compatible) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption("Xdoclint:none", "-quiet")
        }
    }

    if (hasProperty("rt.17.jar")) {
        // Solution for bootstrap classpath warning and possible issues with compatibility with 1.7 libraries
        // was taken from this post on discuss.gradle.org: http://bit.ly/24xD9j0
        def rt17jar = property "rt.17.jar"
        logger.info "Using ${rt17jar} as the bootstrap class path jar."
        gradle.projectsEvaluated {
            tasks.withType(JavaCompile) {
                options.fork = true
                options.compilerArgs << "-XDignore.symbol.file"
                options.bootstrapClasspath = files(rt17jar as String)
            }
        }
    } else {
        logger.warn "No value was set for the rt.17.jar build property, but you are using a Java 8- or 9-compatible JDK. You should consider setting rt.17.jar to indicate a jar file containing the Java 1.7 run-time library:\n"
        logger.warn "\n"
        logger.warn "  ./gradlew -Prt.17.jar=rt-1.7.0_45.jar war\n"
        logger.warn "\n"
        logger.warn "You can also set this property in a gradle.properties file, either in the top level of your build folder or in the folder ~/.gradle/:\n"
        logger.warn "\n"
        logger.warn "  rt.17.jar=/home/developer/.gradle/rt.17.jar\n"
        logger.warn "\n"
        logger.warn "In some isolated instances, using a bootstrap library from a JDK version later than 1.7 can result in run-time errors.\n"
    }
} else if (!javaVersion.java7Compatible) {
    throw new BuildCancelledException("You are using a JDK version (${javaVersion}) that is not compatible with Java 7. The XNAT build will fail. Please install a JDK version of Java 7 or later.")
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url "https://www.dcm4che.org/maven2" }
    maven { url "https://nrgxnat.jfrog.io/nrgxnat/libs-release" }
    maven { url "https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot" }
}

configurations.all {
    exclude group: "net.sf.saxon"
    exclude module: "jmxtools"
    exclude module: "jms"
    exclude module: "mail"
    exclude module: "jmxri"
    exclude module: "javax.mail"
}

dependencyManagement.imports {
    mavenBom "org.nrg:parent:${project.version}"
}

dependencies {
    implementation("org.nrg.xnat.pipeline:xnat-tools") {
        transitive = false
    }
    implementation("org.nrg.xnat.pipeline:xnat-pipeline") {
        transitive = false
    }
    implementation("org.nrg.xnat:xnat-data-models") {
        transitive = false
    }

    implementation "org.nrg.xnat:plexiviewer"
    implementation "org.nrg.xnat.pipeline:tools:1.6"
    implementation "org.nrg:pipelineBase:1.0"
    implementation "org.nrg:pipelineWorkflow:1.0"
    implementation "org.nrg:pipelineCNDAXNAT:1.0"
    implementation "org.ggf:drmaa:1.0"
    implementation "org.lsmp:djep:1.1.0"
    implementation "net.imagej:ij:1.50e"
    implementation "gnu.getopt:java-getopt:1.0.13"
    implementation "edu.ucar:netcdf:4.2"
    implementation "javax.activation:activation:1.1.1"
    implementation "javax.mail:javax.mail-api:1.5.5"
    implementation "com.jcraft:jsch:0.1.44-1"
    implementation "javax.xml:jsr173:1.0"
    implementation "org.ostermiller:utils:1.07.00"
    implementation "xml-resolver:xml-resolver:1.2"
    implementation "xalan:xalan:2.7.1"
    implementation "xerces:xercesImpl:2.9.1"
    implementation "org.apache.xmlbeans:xmlbeans-xpath:2.6.0"
    implementation "commons-discovery:commons-discovery:0.5"
    implementation "commons-logging:commons-logging:1.1.1"
    implementation "commons-collections:commons-collections:3.2.1"
    implementation "commons-lang:commons-lang:2.6"
    implementation "jfree:jcommon:1.0.15"
    implementation "axis:axis"
    implementation "org.restlet:org.restlet"
    implementation "com.noelios.restlet:com.noelios.restlet"
    implementation "com.noelios.restlet:com.noelios.restlet.ext.net:1.1.10"
    implementation "log4j:log4j"
    implementation "org.apache.commons:commons-email:1.4"
    implementation "jfree:jfreechart:1.0.13"

    testImplementation "junit:junit"
}

jacoco {
    toolVersion = dependencyManagement.importedProperties["jacoco.version"] as String
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled = false
        csv.enabled = false
    }
}

task sourceJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourceJar {
                classifier "sources"
            }

            artifact javadocJar {
                classifier "javadoc"
            }

            pom.withXml {
                def root = asNode()
                root.appendNode("name", "XNAT Pipeline")
                root.appendNode("description", "")
                root.appendNode("url", "https://github.com/nrgxnat/pipeline-client")
                root.appendNode("inceptionYear", "2019")

                def scm = root.appendNode("scm")
                scm.appendNode("url", "https://bitbucket.org/xnatdev/plexiviewer")
                scm.appendNode("connection", "scm:https://github.com/nrgxnat/pipeline-client.git")
                scm.appendNode("developerConnection", "scm:git://github.com/nrgxnat/pipeline-client.git")

                def license = root.appendNode("licenses").appendNode("license")
                license.appendNode("name", "Simplified BSD 2-Clause License")
                license.appendNode("url", "http://xnat.org/about/license.php")
                license.appendNode("distribution", "repo")

                def developers = root.appendNode("developers")
                def rherrick = developers.appendNode("developer")
                rherrick.appendNode("id", "rherrick")
                rherrick.appendNode("name", "Rick Herrick")
                rherrick.appendNode("email", "jrherrick@wustl.edu")

                def mohanna = developers.appendNode("developer")
                mohanna.appendNode("id", "mohannar")
                mohanna.appendNode("name", "Mohanna Ramaratnam")
                mohanna.appendNode("email", "mohanakannan9@gmail.com")

                def flavin = developers.appendNode("developer")
                flavin.appendNode("id", "flavin")
                flavin.appendNode("name", "John Flavin")
                flavin.appendNode("email", "jflavin@wustl.edu")
            }
        }
    }
    repositories {
        maven {
            credentials {
                // These properties must be set in the ~/.gradle/gradle.properties file or passed on the Gradle command
                // line in the form -PrepoUsername=foo -PrepoPassword=bar.
                username propertyWithDefault("repoUsername", "username")
                password propertyWithDefault("repoPassword", "password")
            }
            if (project.version.endsWith("-SNAPSHOT")) {
                url "https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot-local"
            } else {
                url "https://nrgxnat.jfrog.io/nrgxnat/libs-release-local"
            }
        }
    }
}

def propertyWithDefault(String property, Object value) {
    hasProperty(property) ? getProperty(property) : value
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption("Xdoclint:none", "-quiet")
        }
    }
}
