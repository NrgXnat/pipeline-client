def vXnat = '1.7.3-SNAPSHOT'

group 'org.nrg.xnat.pipeline'
version '1.7.3'

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'idea'
apply plugin: 'eclipse'

description = """XNAT Pipeline Client"""

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    jcenter()
    maven {
        url 'https://nrgxnat.artifactoryonline.com/nrgxnat/libs-release'
        name 'XNAT Release Repository'
    }
    maven {
        url 'https://nrgxnat.artifactoryonline.com/nrgxnat/libs-snapshot'
        name 'XNAT Snapshot Repository'
    }
    maven {
        url 'https://nrgxnat.artifactoryonline.com/nrgxnat/ext-release'
        name 'XNAT External Release Repository'
    }
    maven {
        url 'http://www.dcm4che.org/maven2'
        name 'dcm4che Maven Repository'
    }
    mavenCentral()
}
dependencies {
    compile (group: 'org.nrg.xnat.pipeline', name: 'xnat-tools', version: vXnat) {
        transitive = false
    }
    compile (group: 'org.nrg.xnat.pipeline', name: 'xnat-pipeline', version: vXnat) {
        transitive = false
    }
    compile group: 'org.nrg.xnat.pipeline', name: 'tools', version:'1.6'
    compile group: 'org.nrg.xnat', name: 'plexiviewer', version: vXnat
    compile(group: 'org.nrg.xnat', name: 'xnat-data-models', version: vXnat) {
        transitive = false
    }
    compile group: 'org.nrg', name: 'pipelineBase', version:'1.0'
    compile group: 'org.nrg', name: 'pipelineWorkflow', version:'1.0'
    compile group: 'org.nrg', name: 'pipelineCNDAXNAT', version:'1.0'
    compile group: 'org.ggf', name: 'drmaa', version:'1.0'
    compile group: 'org.lsmp', name: 'djep', version:'1.1.0'
    compile group: 'net.imagej', name: 'ij', version:'1.50e'
    compile group: 'gnu.getopt', name: 'java-getopt', version:'1.0.13'
    compile group: 'edu.ucar', name: 'netcdf', version:'4.2'
    compile group: 'javax.activation', name: 'activation', version:'1.1.1'
    compile group: 'javax.mail', name: 'javax.mail-api', version:'1.5.5'
    compile group: 'com.jcraft', name: 'jsch', version:'0.1.44-1'
    compile group: 'javax.xml', name: 'jsr173', version:'1.0'
    compile(group: 'log4j', name: 'log4j', version:'1.2.17') {
        exclude(module: 'jmxtools')
        exclude(module: 'jms')
        exclude(module: 'mail')
        exclude(module: 'jmxri')
    }
    compile group: 'org.ostermiller', name: 'utils', version:'1.07.00'
    compile group: 'xml-resolver', name: 'xml-resolver', version:'1.2'
    compile group: 'net.sf.saxon', name: 'Saxon-B', version:'9.0'
    compile group: 'xalan', name: 'xalan', version:'2.7.1'
    compile group: 'xerces', name: 'xercesImpl', version:'2.9.1'
    compile group: 'org.apache.xmlbeans', name: 'xmlbeans-xpath', version:'2.6.0'
    compile(group: 'org.apache.commons', name: 'commons-email', version:'1.4') {
        exclude(module: 'javax.mail')
    }
    compile group: 'commons-discovery', name: 'commons-discovery', version:'0.5'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
    compile group: 'commons-collections', name: 'commons-collections', version:'3.2.1'
    compile group: 'commons-lang', name: 'commons-lang', version:'2.6'
    compile(group: 'jfree', name: 'jfreechart', version:'1.0.13') {
        exclude(module: 'jcommon')
    }
    compile group: 'jfree', name: 'jcommon', version:'1.0.15'
    compile group: 'axis', name: 'axis', version:'1.4'
    compile group: 'org.restlet', name: 'org.restlet', version:'1.1-RC1'
    compile group: 'com.noelios.restlet', name: 'com.noelios.restlet', version:'1.1-RC1'
    compile group: 'com.noelios.restlet', name: 'com.noelios.restlet.ext.net', version:'1.1.8'
    testCompile group: 'junit', name: 'junit', version:'4.12'
}

task sourceJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourceJar {
                classifier "sources"
            }

            artifact javadocJar {
                classifier "javadoc"
            }

            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'XNAT Pipeline')
                root.appendNode('description', '')
                root.appendNode('url', 'https://github.com/nrgxnat/pipeline-client')
                root.appendNode('inceptionYear', '2016')

                def scm = root.appendNode('scm')
                scm.appendNode('url', 'https://bitbucket.org/xnatdev/plexiviewer')
                scm.appendNode('connection', 'scm:https://github.com/nrgxnat/pipeline-client.git')
                scm.appendNode('developerConnection', 'scm:git://github.com/nrgxnat/pipeline-client.git')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'Simplified BSD 2-Clause License')
                license.appendNode('url', 'http://xnat.org/about/license.php')
                license.appendNode('distribution', 'repo')

                def developers = root.appendNode('developers')
                def rherrick = developers.appendNode('developer')
                rherrick.appendNode('id', 'rherrick')
                rherrick.appendNode('name', 'Rick Herrick')
                rherrick.appendNode('email', 'jrherrick@wustl.edu')

                def mohanna = developers.appendNode('developer')
                mohanna.appendNode('id', 'mohannar')
                mohanna.appendNode('name', 'Mohanna Ramaratnam')
                mohanna.appendNode('email', 'mohanakannan9@gmail.com')

                def flavin = developers.appendNode('developer')
                flavin.appendNode('id', 'flavin')
                flavin.appendNode('name', 'John Flavin')
                flavin.appendNode('email', 'jflavin@wustl.edu')
            }
        }
    }
    repositories {
        maven {
            credentials {
                // These properties must be set in the ~/.gradle/gradle.properties file or passed on the Gradle command
                // line in the form -PrepoUsername=foo -PrepoPassword=bar.
                username propertyWithDefault('repoUsername', 'username')
                password propertyWithDefault('repoPassword', 'password')
            }
            if (project.version.endsWith('-SNAPSHOT')) {
                url "https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot-local"
            } else {
                url "https://nrgxnat.jfrog.io/nrgxnat/libs-release-local"
            }
        }
    }
}

def propertyWithDefault(def String property, def Object value) {
    hasProperty(property) ? getProperty(property) : value
}

if (org.gradle.api.JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(org.gradle.api.tasks.javadoc.Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}